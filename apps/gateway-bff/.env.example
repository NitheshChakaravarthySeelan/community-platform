# Example env for gateway-bff
API_BASE_URL=http://localhost:8080
JWT_SECRET=changeme
ENV=local
ENV_DEBUG=true
ENV_PORT=3000
ENV_HOST=0.0.0.0
ENV_PROTOCOL=http
ENV_API_PREFIX=/api
ENV_NODE_ENV=development
ENV_NEXT_PUBLIC_VERSION=0.1.0
ENV_SENTRY_DSN=
ENV_FEATURE_FLAGS=
ENV_REDIS_URL=redis://localhost:6379
ENV_POSTGRES_URL=jdbc:postgresql://localhost:5432/community_dev
ENV_KAFKA_BROKER=kafka:9092
ENV_JAEGER_URL=http://localhost:16686
ENV_PROMETHEUS_URL=http://localhost:9090
ENV_OPENAPI_URL=http://localhost:8080/openapi.json
ENV_OPENAPI_KEY=
ENV_OAUTH_CLIENT_ID=
ENV_OAUTH_CLIENT_SECRET=
ENV_OAUTH_PROVIDER_URL=
ENV_CORS_ALLOWED_ORIGINS=*
ENV_RATE_LIMIT=100
ENV_CACHE_TTL_SECONDS=60
ENV_LOG_LEVEL=debug
ENV_TRACING_ENABLED=true
ENV_OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
ENV_OTEL_SERVICE_NAME=gateway-bff
ENV_OTEL_ENV=dev
ENV_SAML_METADATA_URL=
ENV_SAML_ENTITY_ID=
ENV_SAML_PRIVATE_KEY_PATH=
ENV_SAML_CERT_PATH=
ENV_SAML_IDP_SSO_URL=
ENV_SAML_IDP_ENTITY_ID=
ENV_SAML_CALLBACK_URL=
ENV_SAML_CERT_FINGERPRINT=
ENV_SAML_ASSERTION_CONSUMER_SERVICE_URL=
ENV_SMTP_HOST=smtp.example.com
ENV_SMTP_PORT=587
ENV_SMTP_USER=
ENV_SMTP_PASSWORD=
ENV_SMTP_FROM_ADDRESS=hello@example.com
ENV_IMAGE_SERVICE_URL=http://localhost:9000
ENV_FILE_SERVICE_URL=http://localhost:9001
ENV_REDIS_CACHE_PREFIX=gateway:
ENV_SESSION_SECRET=change_this_session_secret
ENV_OAUTH_REDIRECT_URI=http://localhost:3000/oauth/callback
ENV_SENTRY_ENVIRONMENT=development
ENV_SENTRY_TRACES_SAMPLE_RATE=0.1
ENV_HEALTHCHECK_PATH=/health
ENV_HEALTHCHECK_PORT=3000
ENV_HEALTHCHECK_RETRIES=3
ENV_HEALTHCHECK_TIMEOUT=5s
ENV_HEALTHCHECK_INTERVAL=10s
ENV_PROMETHEUS_METRICS_PATH=/metrics
ENV_PROMETHEUS_METRICS_PORT=3000
ENV_FEATURE_FLAG_CLIENT_KEY=
ENV_FEATURE_FLAG_ENV=dev
ENV_FEATURE_FLAG_URL=
ENV_S3_ENDPOINT=http://localhost:9000
ENV_S3_ACCESS_KEY=minio
ENV_S3_SECRET_KEY=minio123
ENV_S3_BUCKET=media
ENV_S3_REGION=us-east-1
ENV_DEBUG_SQL=false
ENV_DEBUG_CACHE=false
ENV_DEBUG_AUTH=false
ENV_DEBUG_KAFKA=false
ENV_DEBUG_PAYMENT=false
ENV_DEBUG_ORDERS=false
ENV_DEBUG_INVENTORY=false
ENV_DEBUG_NOTIFICATIONS=false
ENV_DEBUG_SEARCH=false
ENV_MAX_PAYLOAD_SIZE=100kb
ENV_MAX_UPLOAD_SIZE=10mb
ENV_MAX_BODY_PARSERS=4
ENV_MAX_FILE_UPLOADS=4
ENV_RATE_LIMIT_WINDOW_MS=60000
ENV_RATE_LIMIT_MAX=100
ENV_CSRF_ENABLED=false
ENV_API_KEY=
ENV_API_KEY_HEADER=x-api-key
ENV_DEFAULT_LOCALE=en
ENV_SUPPORTED_LOCALES=en,es,fr
ENV_DEFAULT_TIMEZONE=UTC
ENV_DEFAULT_CURRENCY=USD
ENV_EMAIL_TEMPLATE_PATH=templates/email
ENV_SENTRY_TRACES_SAMPLE_RATE=0.05
ENV_LOG_FORMAT=json
ENV_LOG_LEVEL=info
ENV_HTTP_PROXY=
ENV_HTTPS_PROXY=
ENV_NO_PROXY=localhost,127.0.0.1
ENV_USE_SSL=false
ENV_COOKIE_DOMAIN=localhost
ENV_COOKIE_SECURE=false
ENV_COOKIE_SAME_SITE=lax
ENV_SESSION_MAX_AGE=86400
ENV_SESSION_STORE=redis
ENV_SESSION_REDIS_URL=redis://localhost:6379
ENV_SCHEDULED_TASKS_ENABLED=false
ENV_AOP_ENABLED=false
ENV_METRICS_ENABLED=true
ENV_METRICS_PREFIX=gateway
ENV_METRICS_PORT=3000
ENV_METRICS_PATH=/metrics
ENV_TRACING_ENABLED=true
ENV_KAFKA_CONSUMER_GROUP=gateway
ENV_KAFKA_PRODUCER_CLIENT_ID=gateway-producer
ENV_KAFKA_AUTO_CREATE_TOPICS=true
ENV_KAFKA_DEFAULT_PARTITIONS=3
ENV_KAFKA_DEFAULT_REPLICATION_FACTOR=1
ENV_HEALTHCHECK_PATH=/health
ENV_HEALTHCHECK_PORT=3000
ENV_HEALTHCHECK_TIMEOUT_SECONDS=5
ENV_HEALTHCHECK_RETRIES=3
ENV_HEALTHCHECK_INTERVAL_SECONDS=10
ENV_LOG_AUTO_INJECTION=false
ENV_PROMETHEUS_METRICS_SCRAPE_PATH=/metrics
ENV_PROMETHEUS_METRICS_SCRAPE_PORT=3000
ENV_REDIRECT_URL=http://localhost:3000
ENV_ADMIN_USERS=
ENV_SUPERADMIN_EMAIL=admin@example.com
ENV_JWT_ISSUER=community-platform
ENV_JWT_AUDIENCE=community-client
ENV_JWT_EXPIRY=3600
ENV_JWT_REFRESH_EXPIRY=86400
ENV_JWT_ALGORITHM=HS256
ENV_JWT_PUBLIC_KEY_PATH=
ENV_JWT_PRIVATE_KEY_PATH=
ENV_JWT_SECRET=change_this_secret
ENV_JWT_COOKIE_NAME=community_jwt
ENV_CSRF_TOKEN_HEADER=x-csrf-token
ENV_ENABLE_CORS=true
ENV_CORS_ORIGIN=*
ENV_CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
ENV_CORS_HEADERS=Content-Type,Authorization
ENV_CORS_CREDENTIALS=true
ENV_CORS_MAX_AGE=3600
ENV_METRICS_PUBLISH_INTERVAL=15
ENV_METRICS_BATCH_SIZE=100
ENV_METRICS_BUFFER_SIZE=10000
ENV_METRICS_RETRY_COUNT=3
ENV_METRICS_ENDPOINT_URL=http://localhost:9090
ENV_LOG_ROTATION_MAX_SIZE=10m
ENV_LOG_ROTATION_MAX_FILES=5
ENV_ACCESS_LOG_FORMAT=combined
ENV_ERROR_LOG_FORMAT=json
ENV_HTTP_TIMEOUT_MS=20000
ENV_HTTP_RETRY_COUNT=3
ENV_HTTP_RETRY_BACKOFF_MS=500
ENV_DB_MAX_POOL_SIZE=20
ENV_DB_MIN_IDLE=2
ENV_DB_MAX_LIFETIME_MS=1800000
ENV_DB_IDLE_TIMEOUT_MS=600000
ENV_DB_CONNECTION_TIMEOUT_MS=30000
ENV_DB_VALIDATION_QUERY=SELECT 1
ENV_DB_POOL_TEST_ON_BORROW=true
ENV_DB_POOL_TEST_ON_RETURN=false
ENV_DB_POOL_TEST_WHILE_IDLE=true
ENV_DB_LEAK_DETECTION_THRESHOLD_MS=2000
ENV_API_RATE_LIMIT_REQUESTS=1000
ENV_API_RATE_LIMIT_WINDOW_SEC=60
ENV_API_RATE_LIMIT_BURST=200
ENV_CACHE_TTL_SECONDS=60
ENV_CACHE_MAX_SIZE=1000000
ENV_CACHE_STRATEGY=LRU
ENV_CACHE_REDIS_PREFIX=gateway
ENV_CACHE_REDIS_TTL=60
ENV_FEATURE_FLAG_SDK_URL=
ENV_FEATURE_FLAG_SDK_KEY=
ENV_METRICS_INFLUXDB_URL=
ENV_METRICS_INFLUXDB_DBNAME=metrics
ENV_METRICS_INFLUXDB_USER=
ENV_METRICS_INFLUXDB_PASS=
ENV_METRICS_INFLUXDB_RETENTION=7d
ENV_OPENAPI_SPEC_PATH=/openapi.json
ENV_OPENAPI_SERVER_URL=http://localhost:8080
ENV_HEALTH_ENDPOINT_ENABLED=true
ENV_LIVENESS_PROBE_PATH=/health/live
ENV_READINESS_PROBE_PATH=/health/ready
ENV_PROMETHEUS_SCRAPE=true
ENV_PROMETHEUS_SCRAPE_INTERVAL=15s
ENV_PROMETHEUS_SCRAPE_TIMEOUT=10s
ENV_PROMETHEUS_TARGET_TAGS=service,env
ENV_KAFKA_MAX_IN_FLIGHT_REQUESTS=5
ENV_KAFKA_AUTO_OFFSET_RESET=earliest
ENV_KAFKA_CONSUMER_POLL_TIMEOUT_MS=1000
ENV_JAEGER_TRACER_SERVICE_NAME=gateway-bff
ENV_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
ENV_OPENTELEMETRY_ENABLED=true
ENV_OPENTELEMETRY_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
ENV_OPENTELEMETRY_SAMPLING_RATIO=0.1
ENV_CSRF_TRUSTED_ORIGINS=localhost
ENV_SECURE_HEADERS_ENABLED=true
ENV_RATE_LIMIT_BYPASS_KEY=
ENV_API_THROTTLE_ENABLED=true
ENV_API_THROTTLE_RATE=1000
ENV_API_THROTTLE_BURST=200
ENV_MAX_RESPONSE_BODY_BYTES=1048576
ENV_MAX_RESPONSE_TIME_MS=30000
ENV_REQUEST_LOGGING_ENABLED=true
ENV_RESPONSE_LOGGING_ENABLED=false
ENV_HTTP2_ENABLED=false
ENV_PREFERRED_PROTOCOL=http
ENV_SESSION_COOKIE_SAME_SITE=Lax
ENV_SESSION_COOKIE_SECURE=false
ENV_STATIC_ASSETS_DIR=public
ENV_FILE_UPLOAD_MAX_SIZE=10485760
ENV_FILE_UPLOAD_DIR=/tmp/uploads
ENV_TEMP_DIR=/tmp
ENV_IMAGE_OPTIMIZER_ENABLED=true
ENV_IMAGE_OPTIMIZER_QUALITY=80
ENV_IMAGE_OPTIMIZER_MAX_WIDTH=1920
ENV_IMAGE_OPTIMIZER_MAX_HEIGHT=1080
ENV_IMAGE_OPTIMIZER_CACHE_DIR=/tmp/image-cache
ENV_MAX_DB_RETRIES=3
ENV_MAX_KAFKA_RETRIES=5
ENV_MAX_HTTP_RETRIES=3
ENV_TLS_CLIENT_AUTH_ENABLED=false
ENV_TLS_SERVER_ENABLED=false
ENV_TLS_CERT_PATH=
ENV_TLS_KEY_PATH=
ENV_TLS_CA_PATH=
ENV_GRACEFUL_SHUTDOWN_TIMEOUT_MS=30000
ENV_HEALTHCHECK_INITIAL_DELAY_SECONDS=10
ENV_HEALTHCHECK_PERIOD_SECONDS=30
ENV_HEALTHCHECK_TIMEOUT_SECONDS=5
ENV_HEALTHCHECK_FAILURE_THRESHOLD=3
ENV_HEALTHCHECK_SUCCESS_THRESHOLD=1
ENV_LOGGING_JSON_DISABLE=false
ENV_STACKDRIVER_PROJECT_ID=
ENV_SENTRY_ENABLED=false
ENV_SENTRY_DSN=
ENV_SENTRY_ENVIRONMENT=local
ENV_SENTRY_SAMPLE_RATE=0.1
ENV_FEATURE_FLAG_ADMIN_USERS=
ENV_HEALTHCHECK_STARTUP_TIMEOUT_MS=60000
ENV_PROMETHEUS_METRICS_PORT=3000
ENV_PROMETHEUS_METRICS_PATH=/metrics
ENV_TEST_MODE=false
ENV_DEBUG_MODE=true
ENV_LOCAL_ONLY=true
ENV_DISABLE_SIGNUPS=false
ENV_SUPPORT_EMAIL=support@example.com
ENV_DEFAULT_RATE_LIMIT=100
ENV_MAX_UPLOADS_PER_MINUTE=10
ENV_METRICS_USE_BIOMETRIC=false
ENV_METRICS_ENABLE_HEAP=true
ENV_METRICS_ENABLE_CPU=true
EOF

# apps/admin-ui stub (Vite)
cat > "$ROOT/apps/admin-ui/package.json" <<'PKG2'
{
"name": "admin-ui",
"version": "0.1.0",
"private": true,
"scripts": {
 "dev": "vite",
 "build": "vite build",
 "preview": "vite preview"
},
"dependencies": {
 "react": "^18.2.0",
 "react-dom": "^18.2.0"
},
"devDependencies": {
 "vite": "^5.1.0",
 "typescript": "^5.2.0"
}
}
PKG2

# infra docker-compose.dev.yml
cat > "$ROOT/infra/docker/docker-compose.dev.yml" <<'DC'
version: "3.8"
services:
postgres:
 image: postgres:15
 environment:
   POSTGRES_USER: postgres
   POSTGRES_PASSWORD: postgres
   POSTGRES_DB: community_dev
 volumes:
   - pgdata:/var/lib/postgresql/data
 ports:
   - "5432:5432"

redis:
 image: redis:7
 ports:
   - "6379:6379"

zookeeper:
 image: confluentinc/cp-zookeeper:7.4.0
 environment:
   ZOOKEEPER_CLIENT_PORT: 2181
 ports:
   - "2181:2181"

kafka:
 image: confluentinc/cp-kafka:7.4.0
 depends_on: [zookeeper]
 environment:
   KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
   KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
   KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
 ports:
   - "9092:9092"

jaeger:
 image: jaegertracing/all-in-one:1.47
 ports:
   - "16686:16686"
   - "6831:6831/udp"

prometheus:
 image: prom/prometheus:latest
 volumes:
   - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
 ports:
   - "9090:9090"

volumes:
pgdata:
DC

# shared proto example
cat > "$ROOT/shared/proto/product.proto" <<'PROTO'
syntax = "proto3";
package community.proto;

message Product {
string id = 1;
string sku = 2;
string title = 3;
string description = 4;
repeated string categories = 5;
double price = 6;
int32 stock = 7;
map<string,string> metadata = 8;
}

message ProductCreated {
Product product = 1;
int64 created_at = 2;
}
PROTO

# sample Spring Boot pom for product-write
cat > "$ROOT/services/catalog/product-write/pom.xml" <<'POM'
<project xmlns="http://maven.apache.org/POM/4.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
      https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>com.community.catalog</groupId>
<artifactId>product-write</artifactId>
<version>0.1.0</version>
<parent>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-parent</artifactId>
 <version>3.2.0</version>
</parent>
<properties>
 <java.version>17</java.version>
</properties>
<dependencies>
 <dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-web</artifactId>
 </dependency>
 <dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-data-jpa</artifactId>
 </dependency>
 <dependency>
   <groupId>org.postgresql</groupId>
   <artifactId>postgresql</artifactId>
   <scope>runtime</scope>
 </dependency>
 <dependency>
   <groupId>org.springframework.kafka</groupId>
   <artifactId>spring-kafka</artifactId>
 </dependency>
 <dependency>
   <groupId>io.micrometer</groupId>
   <artifactId>micrometer-registry-prometheus</artifactId>
 </dependency>
</dependencies>
<build>
 <plugins>
   <plugin>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-maven-plugin</artifactId>
   </plugin>
 </plugins>
</build>
</project>
POM

# sample Spring Boot pom for product-read
cat > "$ROOT/services/catalog/product-read/pom.xml" <<'POM2'
<project xmlns="http://maven.apache.org/POM/4.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
      https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>com.community.catalog</groupId>
<artifactId>product-read</artifactId>
<version>0.1.0</version>
<parent>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-parent</artifactId>
 <version>3.2.0</version>
</parent>
<properties>
 <java.version>17</java.version>
</properties>
<dependencies>
 <dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-web</artifactId>
 </dependency>
 <dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-data-redis</artifactId>
 </dependency>
 <dependency>
   <groupId>io.micrometer</groupId>
   <artifactId>micrometer-registry-prometheus</artifactId>
 </dependency>
</dependencies>
<build>
 <plugins>
   <plugin>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-maven-plugin</artifactId>
   </plugin>
 </plugins>
</build>
</project>
POM2

# sample Dockerfiles (basic)
cat > "$ROOT/services/catalog/product-write/Dockerfile" <<'DFW'
# multi-stage build (maven)
FROM maven:3.9.1-eclipse-temurin-17 as build
WORKDIR /workspace
COPY pom.xml .
COPY src ./src
RUN mvn -B -DskipTests package

FROM eclipse-temurin:17-jre
COPY --from=build /workspace/target/*.jar /app/app.jar
ENTRYPOINT ["java","-jar","/app/app.jar"]
DFW

cat > "$ROOT/services/catalog/product-read/Dockerfile" <<'DFR'
FROM maven:3.9.1-eclipse-temurin-17 as build
WORKDIR /workspace
COPY pom.xml .
COPY src ./src
RUN mvn -B -DskipTests package

FROM eclipse-temurin:17-jre
COPY --from=build /workspace/target/*.jar /app/app.jar
ENTRYPOINT ["java","-jar","/app/app.jar"]
DFR

# sample helm Chart.yaml for product-write
cat > "$ROOT/services/catalog/product-write/helm-chart/Chart.yaml" <<'CH'
apiVersion: v2
name: product-write
description: Product Write Service chart
type: application
version: 0.1.0
appVersion: "0.1.0"
CH

cat > "$ROOT/services/catalog/product-write/helm-chart/values.yaml" <<'HV'
replicaCount: 1
image:
repository: community/product-write
tag: "0.1.0"
service:
port: 8080
resources:
requests:
 cpu: 100m
 memory: 256Mi
limits:
 cpu: 500m
 memory: 512Mi
HV

cat > "$ROOT/services/catalog/product-write/helm-chart/templates/deployment.yaml" <<'TD'
apiVersion: apps/v1
kind: Deployment
metadata:
name: {{ include "product-write.fullname" . }}
spec:
replicas: {{ .Values.replicaCount }}
selector:
 matchLabels:
   app: {{ include "product-write.name" . }}
template:
 metadata:
   labels:
     app: {{ include "product-write.name" . }}
 spec:
   containers:
     - name: product-write
       image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
       ports:
         - containerPort: {{ .Values.service.port }}
TD

# docs skeleton
cat > "$ROOT/docs/architecture.md" <<'ARCH'
# Architecture Overview

This document describes the high-level architecture for the Community Platform.
- Domain-based microservices
- Event-driven (Kafka)
- Polyglot runtimes (Java, Node, Python, Rust)
- Observability (Prometheus, Jaeger, Grafana)
ARCH

cat > "$ROOT/docs/api-contracts.md" <<'APIC'
# API Contracts

Shared proto files live in `shared/proto/`. Use protoc/buf to generate language bindings.
APIC

cat > "$ROOT/docs/CONTRIBUTING.md" <<'CM'
# Contributing
Follow these steps:
- Fork the repo
- Create a feature branch
- Run unit tests and linters
- Submit PR with description and tests
CM

# One-line success
echo "Bootstrap complete. Repository skeleton created at ./${ROOT}"
echo "Run: cd ${ROOT} && git init && git add . && git commit -m 'chore: scaffold repo'"

exit 0

